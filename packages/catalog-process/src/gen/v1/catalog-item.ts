// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "v1/catalog-item.proto" (syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CatalogItemV1
 */
export interface CatalogItemV1 {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string producerId = 2;
     */
    producerId: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: CatalogItemTechnologyV1 technology = 5;
     */
    technology: CatalogItemTechnologyV1;
    /**
     * @generated from protobuf field: optional CatalogAttributesV1 attributes = 6;
     */
    attributes?: CatalogAttributesV1;
    /**
     * @generated from protobuf field: repeated CatalogDescriptorV1 descriptors = 7;
     */
    descriptors: CatalogDescriptorV1[];
    /**
     * @generated from protobuf field: optional int64 createdAt = 8;
     */
    createdAt?: bigint;
}
/**
 * @generated from protobuf message CatalogAttributeValueV1
 */
export interface CatalogAttributeValueV1 {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool explicitAttributeVerification = 2;
     */
    explicitAttributeVerification: boolean;
}
/**
 * @generated from protobuf message CatalogAttributeV1
 */
export interface CatalogAttributeV1 {
    /**
     * @generated from protobuf field: optional CatalogAttributeValueV1 single = 1;
     */
    single?: CatalogAttributeValueV1;
    /**
     * @generated from protobuf field: repeated CatalogAttributeValueV1 group = 2;
     */
    group: CatalogAttributeValueV1[];
}
/**
 * @generated from protobuf message CatalogAttributesV1
 */
export interface CatalogAttributesV1 {
    /**
     * @generated from protobuf field: repeated CatalogAttributeV1 certified = 1;
     */
    certified: CatalogAttributeV1[];
    /**
     * @generated from protobuf field: repeated CatalogAttributeV1 declared = 2;
     */
    declared: CatalogAttributeV1[];
    /**
     * @generated from protobuf field: repeated CatalogAttributeV1 verified = 3;
     */
    verified: CatalogAttributeV1[];
}
/**
 * @generated from protobuf message CatalogDescriptorV1
 */
export interface CatalogDescriptorV1 {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
    /**
     * @generated from protobuf field: optional string description = 3;
     */
    description?: string;
    /**
     * @generated from protobuf field: repeated CatalogDocumentV1 docs = 4;
     */
    docs: CatalogDocumentV1[];
    /**
     * @generated from protobuf field: CatalogDescriptorStateV1 state = 5;
     */
    state: CatalogDescriptorStateV1;
    /**
     * @generated from protobuf field: optional CatalogDocumentV1 interface = 6;
     */
    interface?: CatalogDocumentV1;
    /**
     * @generated from protobuf field: repeated string audience = 7;
     */
    audience: string[];
    /**
     * @generated from protobuf field: int32 voucherLifespan = 8;
     */
    voucherLifespan: number;
    /**
     * @generated from protobuf field: int32 dailyCallsPerConsumer = 9;
     */
    dailyCallsPerConsumer: number;
    /**
     * @generated from protobuf field: int32 dailyCallsTotal = 10;
     */
    dailyCallsTotal: number;
    /**
     * @generated from protobuf field: optional AgreementApprovalPolicyV1 agreementApprovalPolicy = 11;
     */
    agreementApprovalPolicy?: AgreementApprovalPolicyV1;
    /**
     * @generated from protobuf field: optional int64 createdAt = 12;
     */
    createdAt?: bigint;
    /**
     * @generated from protobuf field: optional int64 publishedAt = 13;
     */
    publishedAt?: bigint;
    /**
     * @generated from protobuf field: repeated string serverUrls = 14;
     */
    serverUrls: string[];
    /**
     * @generated from protobuf field: optional int64 suspendedAt = 15;
     */
    suspendedAt?: bigint;
    /**
     * @generated from protobuf field: optional int64 deprecatedAt = 16;
     */
    deprecatedAt?: bigint;
    /**
     * @generated from protobuf field: optional int64 archivedAt = 17;
     */
    archivedAt?: bigint;
    /**
     * @generated from protobuf field: optional CatalogAttributesV1 attributes = 18;
     */
    attributes?: CatalogAttributesV1;
}
/**
 * @generated from protobuf message CatalogDocumentV1
 */
export interface CatalogDocumentV1 {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string contentType = 3;
     */
    contentType: string;
    /**
     * @generated from protobuf field: string path = 4;
     */
    path: string;
    /**
     * @generated from protobuf field: string checksum = 5;
     */
    checksum: string;
    /**
     * @generated from protobuf field: string uploadDate = 6;
     */
    uploadDate: string;
    /**
     * @generated from protobuf field: string prettyName = 7;
     */
    prettyName: string;
}
/**
 * @generated from protobuf enum CatalogDescriptorStateV1
 */
export enum CatalogDescriptorStateV1 {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: DRAFT = 1;
     */
    DRAFT = 1,
    /**
     * @generated from protobuf enum value: PUBLISHED = 2;
     */
    PUBLISHED = 2,
    /**
     * @generated from protobuf enum value: DEPRECATED = 3;
     */
    DEPRECATED = 3,
    /**
     * @generated from protobuf enum value: SUSPENDED = 4;
     */
    SUSPENDED = 4,
    /**
     * @generated from protobuf enum value: ARCHIVED = 5;
     */
    ARCHIVED = 5
}
/**
 * @generated from protobuf enum CatalogItemTechnologyV1
 */
export enum CatalogItemTechnologyV1 {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: REST = 1;
     */
    REST = 1,
    /**
     * @generated from protobuf enum value: SOAP = 2;
     */
    SOAP = 2
}
/**
 * @generated from protobuf enum AgreementApprovalPolicyV1
 */
export enum AgreementApprovalPolicyV1 {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: AUTOMATIC = 1;
     */
    AUTOMATIC = 1,
    /**
     * @generated from protobuf enum value: MANUAL = 2;
     */
    MANUAL = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class CatalogItemV1$Type extends MessageType<CatalogItemV1> {
    constructor() {
        super("CatalogItemV1", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "producerId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "technology", kind: "enum", T: () => ["CatalogItemTechnologyV1", CatalogItemTechnologyV1] },
            { no: 6, name: "attributes", kind: "message", T: () => CatalogAttributesV1 },
            { no: 7, name: "descriptors", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CatalogDescriptorV1 },
            { no: 8, name: "createdAt", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CatalogItemV1>): CatalogItemV1 {
        const message = { id: "", producerId: "", name: "", description: "", technology: 0, descriptors: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CatalogItemV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CatalogItemV1): CatalogItemV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string producerId */ 2:
                    message.producerId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* CatalogItemTechnologyV1 technology */ 5:
                    message.technology = reader.int32();
                    break;
                case /* optional CatalogAttributesV1 attributes */ 6:
                    message.attributes = CatalogAttributesV1.internalBinaryRead(reader, reader.uint32(), options, message.attributes);
                    break;
                case /* repeated CatalogDescriptorV1 descriptors */ 7:
                    message.descriptors.push(CatalogDescriptorV1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int64 createdAt */ 8:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CatalogItemV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string producerId = 2; */
        if (message.producerId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.producerId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* CatalogItemTechnologyV1 technology = 5; */
        if (message.technology !== 0)
            writer.tag(5, WireType.Varint).int32(message.technology);
        /* optional CatalogAttributesV1 attributes = 6; */
        if (message.attributes)
            CatalogAttributesV1.internalBinaryWrite(message.attributes, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated CatalogDescriptorV1 descriptors = 7; */
        for (let i = 0; i < message.descriptors.length; i++)
            CatalogDescriptorV1.internalBinaryWrite(message.descriptors[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 createdAt = 8; */
        if (message.createdAt !== undefined)
            writer.tag(8, WireType.Varint).int64(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CatalogItemV1
 */
export const CatalogItemV1 = new CatalogItemV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CatalogAttributeValueV1$Type extends MessageType<CatalogAttributeValueV1> {
    constructor() {
        super("CatalogAttributeValueV1", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "explicitAttributeVerification", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CatalogAttributeValueV1>): CatalogAttributeValueV1 {
        const message = { id: "", explicitAttributeVerification: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CatalogAttributeValueV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CatalogAttributeValueV1): CatalogAttributeValueV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool explicitAttributeVerification */ 2:
                    message.explicitAttributeVerification = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CatalogAttributeValueV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool explicitAttributeVerification = 2; */
        if (message.explicitAttributeVerification !== false)
            writer.tag(2, WireType.Varint).bool(message.explicitAttributeVerification);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CatalogAttributeValueV1
 */
export const CatalogAttributeValueV1 = new CatalogAttributeValueV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CatalogAttributeV1$Type extends MessageType<CatalogAttributeV1> {
    constructor() {
        super("CatalogAttributeV1", [
            { no: 1, name: "single", kind: "message", T: () => CatalogAttributeValueV1 },
            { no: 2, name: "group", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CatalogAttributeValueV1 }
        ]);
    }
    create(value?: PartialMessage<CatalogAttributeV1>): CatalogAttributeV1 {
        const message = { group: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CatalogAttributeV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CatalogAttributeV1): CatalogAttributeV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional CatalogAttributeValueV1 single */ 1:
                    message.single = CatalogAttributeValueV1.internalBinaryRead(reader, reader.uint32(), options, message.single);
                    break;
                case /* repeated CatalogAttributeValueV1 group */ 2:
                    message.group.push(CatalogAttributeValueV1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CatalogAttributeV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional CatalogAttributeValueV1 single = 1; */
        if (message.single)
            CatalogAttributeValueV1.internalBinaryWrite(message.single, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated CatalogAttributeValueV1 group = 2; */
        for (let i = 0; i < message.group.length; i++)
            CatalogAttributeValueV1.internalBinaryWrite(message.group[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CatalogAttributeV1
 */
export const CatalogAttributeV1 = new CatalogAttributeV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CatalogAttributesV1$Type extends MessageType<CatalogAttributesV1> {
    constructor() {
        super("CatalogAttributesV1", [
            { no: 1, name: "certified", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CatalogAttributeV1 },
            { no: 2, name: "declared", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CatalogAttributeV1 },
            { no: 3, name: "verified", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CatalogAttributeV1 }
        ]);
    }
    create(value?: PartialMessage<CatalogAttributesV1>): CatalogAttributesV1 {
        const message = { certified: [], declared: [], verified: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CatalogAttributesV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CatalogAttributesV1): CatalogAttributesV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CatalogAttributeV1 certified */ 1:
                    message.certified.push(CatalogAttributeV1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CatalogAttributeV1 declared */ 2:
                    message.declared.push(CatalogAttributeV1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated CatalogAttributeV1 verified */ 3:
                    message.verified.push(CatalogAttributeV1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CatalogAttributesV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CatalogAttributeV1 certified = 1; */
        for (let i = 0; i < message.certified.length; i++)
            CatalogAttributeV1.internalBinaryWrite(message.certified[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated CatalogAttributeV1 declared = 2; */
        for (let i = 0; i < message.declared.length; i++)
            CatalogAttributeV1.internalBinaryWrite(message.declared[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated CatalogAttributeV1 verified = 3; */
        for (let i = 0; i < message.verified.length; i++)
            CatalogAttributeV1.internalBinaryWrite(message.verified[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CatalogAttributesV1
 */
export const CatalogAttributesV1 = new CatalogAttributesV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CatalogDescriptorV1$Type extends MessageType<CatalogDescriptorV1> {
    constructor() {
        super("CatalogDescriptorV1", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "docs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CatalogDocumentV1 },
            { no: 5, name: "state", kind: "enum", T: () => ["CatalogDescriptorStateV1", CatalogDescriptorStateV1] },
            { no: 6, name: "interface", kind: "message", T: () => CatalogDocumentV1 },
            { no: 7, name: "audience", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "voucherLifespan", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "dailyCallsPerConsumer", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "dailyCallsTotal", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "agreementApprovalPolicy", kind: "enum", opt: true, T: () => ["AgreementApprovalPolicyV1", AgreementApprovalPolicyV1] },
            { no: 12, name: "createdAt", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "publishedAt", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "serverUrls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "suspendedAt", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "deprecatedAt", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "archivedAt", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "attributes", kind: "message", T: () => CatalogAttributesV1 }
        ]);
    }
    create(value?: PartialMessage<CatalogDescriptorV1>): CatalogDescriptorV1 {
        const message = { id: "", version: "", docs: [], state: 0, audience: [], voucherLifespan: 0, dailyCallsPerConsumer: 0, dailyCallsTotal: 0, serverUrls: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CatalogDescriptorV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CatalogDescriptorV1): CatalogDescriptorV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                case /* optional string description */ 3:
                    message.description = reader.string();
                    break;
                case /* repeated CatalogDocumentV1 docs */ 4:
                    message.docs.push(CatalogDocumentV1.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* CatalogDescriptorStateV1 state */ 5:
                    message.state = reader.int32();
                    break;
                case /* optional CatalogDocumentV1 interface */ 6:
                    message.interface = CatalogDocumentV1.internalBinaryRead(reader, reader.uint32(), options, message.interface);
                    break;
                case /* repeated string audience */ 7:
                    message.audience.push(reader.string());
                    break;
                case /* int32 voucherLifespan */ 8:
                    message.voucherLifespan = reader.int32();
                    break;
                case /* int32 dailyCallsPerConsumer */ 9:
                    message.dailyCallsPerConsumer = reader.int32();
                    break;
                case /* int32 dailyCallsTotal */ 10:
                    message.dailyCallsTotal = reader.int32();
                    break;
                case /* optional AgreementApprovalPolicyV1 agreementApprovalPolicy */ 11:
                    message.agreementApprovalPolicy = reader.int32();
                    break;
                case /* optional int64 createdAt */ 12:
                    message.createdAt = reader.int64().toBigInt();
                    break;
                case /* optional int64 publishedAt */ 13:
                    message.publishedAt = reader.int64().toBigInt();
                    break;
                case /* repeated string serverUrls */ 14:
                    message.serverUrls.push(reader.string());
                    break;
                case /* optional int64 suspendedAt */ 15:
                    message.suspendedAt = reader.int64().toBigInt();
                    break;
                case /* optional int64 deprecatedAt */ 16:
                    message.deprecatedAt = reader.int64().toBigInt();
                    break;
                case /* optional int64 archivedAt */ 17:
                    message.archivedAt = reader.int64().toBigInt();
                    break;
                case /* optional CatalogAttributesV1 attributes */ 18:
                    message.attributes = CatalogAttributesV1.internalBinaryRead(reader, reader.uint32(), options, message.attributes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CatalogDescriptorV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        /* optional string description = 3; */
        if (message.description !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* repeated CatalogDocumentV1 docs = 4; */
        for (let i = 0; i < message.docs.length; i++)
            CatalogDocumentV1.internalBinaryWrite(message.docs[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* CatalogDescriptorStateV1 state = 5; */
        if (message.state !== 0)
            writer.tag(5, WireType.Varint).int32(message.state);
        /* optional CatalogDocumentV1 interface = 6; */
        if (message.interface)
            CatalogDocumentV1.internalBinaryWrite(message.interface, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated string audience = 7; */
        for (let i = 0; i < message.audience.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.audience[i]);
        /* int32 voucherLifespan = 8; */
        if (message.voucherLifespan !== 0)
            writer.tag(8, WireType.Varint).int32(message.voucherLifespan);
        /* int32 dailyCallsPerConsumer = 9; */
        if (message.dailyCallsPerConsumer !== 0)
            writer.tag(9, WireType.Varint).int32(message.dailyCallsPerConsumer);
        /* int32 dailyCallsTotal = 10; */
        if (message.dailyCallsTotal !== 0)
            writer.tag(10, WireType.Varint).int32(message.dailyCallsTotal);
        /* optional AgreementApprovalPolicyV1 agreementApprovalPolicy = 11; */
        if (message.agreementApprovalPolicy !== undefined)
            writer.tag(11, WireType.Varint).int32(message.agreementApprovalPolicy);
        /* optional int64 createdAt = 12; */
        if (message.createdAt !== undefined)
            writer.tag(12, WireType.Varint).int64(message.createdAt);
        /* optional int64 publishedAt = 13; */
        if (message.publishedAt !== undefined)
            writer.tag(13, WireType.Varint).int64(message.publishedAt);
        /* repeated string serverUrls = 14; */
        for (let i = 0; i < message.serverUrls.length; i++)
            writer.tag(14, WireType.LengthDelimited).string(message.serverUrls[i]);
        /* optional int64 suspendedAt = 15; */
        if (message.suspendedAt !== undefined)
            writer.tag(15, WireType.Varint).int64(message.suspendedAt);
        /* optional int64 deprecatedAt = 16; */
        if (message.deprecatedAt !== undefined)
            writer.tag(16, WireType.Varint).int64(message.deprecatedAt);
        /* optional int64 archivedAt = 17; */
        if (message.archivedAt !== undefined)
            writer.tag(17, WireType.Varint).int64(message.archivedAt);
        /* optional CatalogAttributesV1 attributes = 18; */
        if (message.attributes)
            CatalogAttributesV1.internalBinaryWrite(message.attributes, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CatalogDescriptorV1
 */
export const CatalogDescriptorV1 = new CatalogDescriptorV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CatalogDocumentV1$Type extends MessageType<CatalogDocumentV1> {
    constructor() {
        super("CatalogDocumentV1", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contentType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "checksum", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "uploadDate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "prettyName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CatalogDocumentV1>): CatalogDocumentV1 {
        const message = { id: "", name: "", contentType: "", path: "", checksum: "", uploadDate: "", prettyName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CatalogDocumentV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CatalogDocumentV1): CatalogDocumentV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string contentType */ 3:
                    message.contentType = reader.string();
                    break;
                case /* string path */ 4:
                    message.path = reader.string();
                    break;
                case /* string checksum */ 5:
                    message.checksum = reader.string();
                    break;
                case /* string uploadDate */ 6:
                    message.uploadDate = reader.string();
                    break;
                case /* string prettyName */ 7:
                    message.prettyName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CatalogDocumentV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string contentType = 3; */
        if (message.contentType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contentType);
        /* string path = 4; */
        if (message.path !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.path);
        /* string checksum = 5; */
        if (message.checksum !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.checksum);
        /* string uploadDate = 6; */
        if (message.uploadDate !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.uploadDate);
        /* string prettyName = 7; */
        if (message.prettyName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.prettyName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CatalogDocumentV1
 */
export const CatalogDocumentV1 = new CatalogDocumentV1$Type();
