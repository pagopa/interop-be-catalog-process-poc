openapi: 3.0.3

info:
  title: Security Process Micro Service
  description: This service is the security supplier
  version: "{{version}}"
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  termsOfService: "http://swagger.io/terms/"
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: "/authorization-process/{{version}}"
    description: This service is the security supplier
security:
  - bearerAuth: []
tags:
  - name: client
    description: Get security information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Get security information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: health
    description: Verify service status
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /clientsConsumer:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - client
      summary: Create a new consumer client
      description: Create a new consumer client
      operationId: createConsumerClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientSeed"
      responses:
        "200":
          description: Client created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clientsApi:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - client
      summary: Create a new API client
      description: Create a new API client
      operationId: createApiClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientSeed"
      responses:
        "200":
          description: Client created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clientsWithKeys:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - client
      summary: List clients with keys
      description: List clients with keys
      operationId: getClientsWithKeys
      parameters:
        - in: query
          name: name
          description: Filter for the client name
          schema:
            type: string
        - in: query
          name: userIds
          description: comma separated sequence of user IDs
          schema:
            type: array
            items:
              type: string
              format: uuid
            default: []
          explode: false
        - name: consumerId
          in: query
          description: ID of Consumer that MUST be related to the Client
          required: true
          schema:
            type: string
            format: uuid
        - name: purposeId
          in: query
          description: ID of Purpose that MUST be related to the Client
          schema:
            type: string
            format: uuid
        - name: kind
          in: query
          description: type of Client to be retrieved
          schema:
            $ref: "#/components/schemas/ClientKind"
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
      responses:
        "200":
          description: Clients found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientsWithKeys"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clients:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - client
      summary: List clients
      description: List clients
      operationId: getClients
      parameters:
        - in: query
          name: name
          description: Filter for the client name
          schema:
            type: string
        - in: query
          name: userIds
          description: comma separated sequence of user IDs
          schema:
            type: array
            items:
              type: string
              format: uuid
            default: []
          explode: false
        - name: consumerId
          in: query
          description: ID of Consumer that MUST be related to the Client
          required: true
          schema:
            type: string
            format: uuid
        - name: purposeId
          in: query
          description: ID of Purpose that MUST be related to the Client
          schema:
            type: string
            format: uuid
        - name: kind
          in: query
          description: type of Client to be retrieved
          schema:
            $ref: "#/components/schemas/ClientKind"
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
      responses:
        "200":
          description: Clients found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clients"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clients/{clientId}:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      description: Retrieves a Client
      tags:
        - client
      summary: Get a Client
      operationId: getClient
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Client retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      description: Deletes a Client
      tags:
        - client
      summary: Delete a Client
      operationId: deleteClient
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Client deleted
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/users":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - client
      summary: List client users
      description: List client users
      operationId: getClientUsers
      parameters:
        - name: clientId
          in: path
          description: ID of Client the users belong to
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/users/{userId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
      - name: clientId
        in: path
        description: The Client id
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        description: The identifier of the user between the security user and the consumer
        required: true
        schema:
          type: string
          format: uuid
    delete:
      description: Removes a user from a Client
      tags:
        - client
      summary: Remove an user from a Client
      operationId: removeUser
      responses:
        "204":
          description: User removed
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client or User not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      tags:
        - client
      summary: Add an user to a Client
      operationId: addUser
      responses:
        "200":
          description: User added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Missing Required Information
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
      description: Add an user to a Client
  "/clients/{clientId}/keys":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - client
      summary: Create Keys for the specific clientId.
      operationId: createKeys
      responses:
        "200":
          description: Keys created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keys"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        required: true
        description: an array of base64 encoded PEM keys.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeysSeed"
      description: Creates one or more keys for the corresponding client.
      parameters:
        - name: clientId
          in: path
          required: true
          description: ID of client that the added keys MUST belong to
          schema:
            type: string
            format: uuid
    get:
      tags:
        - client
      summary: Returns a set of keys by client ID.
      description: "Given a client identifier it returns its corresponding set of keys, if any"
      operationId: getClientKeys
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: userIds
          in: query
          description: comma separated sequence of user IDs
          schema:
            type: array
            items:
              type: string
              format: uuid
            default: []
          explode: false
      responses:
        "200":
          description: returns the corresponding array of keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keys"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/keys/{keyId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - client
      summary: Returns a key by client and key identifier (kid).
      description: "Given a client and key identifiers it returns the corresponding key, if any"
      operationId: getClientKeyById
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to lookup
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns the corresponding key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Key"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - client
      summary: Deletes a key by client and key identifier (kid).
      description: "Given a client and key identifiers it deletes the corresponding key, if any"
      operationId: deleteClientKeyById
      parameters:
        - name: clientId
          in: path
          description: ID of the client holding the key
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: the corresponding key has been deleted.
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/users/{userId}/keys":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
      - name: clientId
        in: path
        description: ID of the client holding the key
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        required: true
        description: ID of the User that the added keys MUST belong to
        schema:
          type: string
          format: uuid
    get:
      tags:
        - user
      summary: Returns a set of keys by user ID and client ID.
      description: "Given an user and a client it returns its corresponding set of keys, if any"
      operationId: getClientUserKeys
      responses:
        "200":
          description: returns the corresponding array of keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keys"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/purposes":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - client
      summary: Adds a purpose to a client
      description: Adds a purpose to a client
      operationId: addClientPurpose
      parameters:
        - name: clientId
          in: path
          description: ID of Client
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Details of the Purpose to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PurposeAdditionDetails"
      responses:
        "204":
          description: Request succeed
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/purposes/{purposeId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    delete:
      tags:
        - client
      summary: Removes a purpose from a client
      description: Removes a purpose from a client
      operationId: removeClientPurpose
      parameters:
        - name: clientId
          in: path
          description: ID of Client
          required: true
          schema:
            type: string
            format: uuid
        - name: purposeId
          in: path
          description: ID of Purpose
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Request succeed
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clients/purposes/{purposeId}:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    delete:
      tags:
        - client
      summary: Removes the purpose from all clients
      description: Removes the purpose from all clients
      operationId: removePurposeFromClients
      parameters:
        - name: purposeId
          in: path
          description: ID of Purpose
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Request succeed
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Purpose Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /status:
    get:
      security: []
      tags:
        - health
      summary: Health status endpoint
      description: Return ok
      operationId: getStatus
      responses:
        "200":
          description: successful operation
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
components:
  parameters:
    CorrelationIdHeader:
      in: header
      name: X-Correlation-Id
      required: true
      schema:
        type: string
  schemas:
    ClientSeed:
      description: Client creation request body
      type: object
      properties:
        name:
          type: string
          minLength: 5
          maxLength: 60
        description:
          type: string
          minLength: 10
          maxLength: 250
        members:
          items:
            type: string
            format: uuid
      required:
        - name
        - members
    Client:
      description: Models Client details
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        consumerId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        purposes:
          type: array
          items:
            type: string
            format: uuid
          default: []
        description:
          type: string
        users:
          type: array
          items:
            type: string
            format: uuid
          uniqueItems: true
        kind:
          $ref: "#/components/schemas/ClientKind"
      required:
        - id
        - name
        - consumerId
        - purposes
        - users
        - kind
        - createdAt
    ClientKind:
      type: string
      description: kind of client
      enum:
        - CONSUMER
        - API
    ClientWithKeys:
      type: object
      properties:
        client:
          $ref: "#/components/schemas/Client"
        keys:
          type: array
          items:
            $ref: "#/components/schemas/Key"
      required:
        - client
        - keys
    ClientsWithKeys:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ClientWithKeys"
        totalCount:
          type: integer
          format: int32
      required:
        - results
        - totalCount
    Clients:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Client"
        totalCount:
          type: integer
          format: int32
      required:
        - results
        - totalCount
    Users:
      type: array
      items:
        type: string
        format: uuid
    Key:
      description: "Models the PersistentKey"
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: "Represents the identifier of the user"
        kid:
          type: string
        name:
          type: string
        encodedPem:
          type: string
        algorithm:
          type: string
        use:
          $ref: "#/components/schemas/KeyUse"
        createdAt:
          type: string
          format: date-time
      required:
        - userId
        - kid
        - name
        - encodedPem
        - algorithm
        - use
        - createdAt
    Keys:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: "#/components/schemas/Key"
      required:
        - keys
    OtherPrimeInfo:
      title: OtherPrimeInfo
      type: object
      properties:
        r:
          type: string
        d:
          type: string
        t:
          type: string
      required:
        - r
        - d
        - t
    KeysSeed:
      type: array
      items:
        $ref: "#/components/schemas/KeySeed"
    KeySeed:
      description: "Models the seed for a public key to be persisted"
      type: object
      properties:
        key:
          type: string
          description: "Base64 UTF-8 encoding of a public key in PEM format"
        use:
          $ref: "#/components/schemas/KeyUse"
        alg:
          type: string
          description: "The algorithm type of the key."
        name:
          type: string
          description: "Name given to the current key."
          minLength: 5
          maxLength: 60
      required:
        - key
        - use
        - alg
        - name
    KeyUse:
      type: string
      description: Represents the Use field of key
      enum:
        - SIG
        - ENC
    Organization:
      description: Models an Organization
      type: object
      properties:
        institutionId:
          type: string
        description:
          type: string
      required:
        - institutionId
        - description
    PurposeAdditionDetails:
      type: object
      properties:
        purposeId:
          type: string
          format: uuid
      required:
        - purposeId
    Agreement:
      type: object
      properties:
        id:
          type: string
          format: uuid
        eservice:
          $ref: "#/components/schemas/EService"
        descriptor:
          $ref: "#/components/schemas/EServiceDescriptor"
      required:
        - id
        - eservice
        - descriptor
    EService:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    EServiceDescriptor:
      type: object
      properties:
        id:
          type: string
          format: uuid
        version:
          type: string
      required:
        - id
        - version
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: "^[ -~]{0,64}$"
          type: string
        correlationId:
          description: Unique identifier of the request
          example: "53af4f2d-0c87-41ef-a645-b726a821852b"
          maxLength: 64
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: "^.{0,1024}$"
          type: string
        errors:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/ProblemError"
      additionalProperties: false
      required:
        - type
        - status
        - title
        - errors
    ProblemError:
      properties:
        code:
          description: Internal code of the error
          example: 123-4567
          minLength: 8
          maxLength: 8
          pattern: "^[0-9]{3}-[0-9]{4}$"
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Parameter not valid
          maxLength: 4096
          pattern: "^.{0,1024}$"
          type: string
      required:
        - code
        - detail
  securitySchemes:
    bearerAuth:
      type: http
      description: A bearer token in the format of a JWS and comformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).
      scheme: bearer
      bearerFormat: JWT
