import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";

{{#each schemas}}
export const {{@key}} = {{{this}}};
export type {{@key}} = z.infer<typeof {{@key}}>;

{{/each}}

{{#each endpointsGroups}}
const {{@key}}Endpoints = makeApi([
{{#each this.endpoints}}
	{
		method: "{{method}}",
		path: "{{path}}",
		{{#if @root.options.withAlias}}
		{{#if alias}}
		alias: "{{alias}}",
		{{/if}}
		{{/if}}
		{{#if description}}
		description: `{{description}}`,
		{{/if}}
		{{#if requestFormat}}
		requestFormat: "{{requestFormat}}",
		{{/if}}
		{{#if parameters}}
		parameters: [
			{{#each parameters}}
			{
				name: "{{name}}",
				{{#if description}}
				description: `{{description}}`,
				{{/if}}
				{{#if type}}
				type: "{{type}}",
				{{/if}}
				{{#if (and (eq type "Query") (eq schema "z.array(z.string()).optional().default([])"))}}
						schema: z.string().optional().transform(v => v ? v.split(",") : undefined).pipe(z.array(z.string()).optional().default([])),
				{{else if (and (eq type "Query") (eq schema "z.array(AttributeKind)"))}}
						schema: z.string().transform(v => v.split(",")).pipe(z.array(AttributeKind)),
				{{else if (and (eq type "Query") (eq schema "z.array(AgreementState).optional().default([])"))}}
						schema: z.string().optional().transform(v => v ? v.split(",") : undefined ).pipe(z.array(AgreementState).optional().default([])),
				{{else if (and (eq type "Query") (eq schema "z.array(EServiceDescriptorState).optional().default([])"))}}
						schema: z.string().optional().transform(v => v ? v.split(",") : undefined ).pipe(z.array(EServiceDescriptorState).optional().default([])),
				{{else if (and (eq type "Query") (eq schema "z.array(PurposeVersionState).optional().default([])"))}}
						schema: z.string().optional().transform(v => v ? v.split(",") : undefined ).pipe(z.array(PurposeVersionState).optional().default([])),
				{{else}}
					schema: {{{schema}}},
				{{/if}}
			},
			{{/each}}
		],
		{{/if}}
		{{#if (and (eq method "get") (eq path "/agreements/:agreementId/consumer-documents/:documentId"))}}
			response: z.instanceof(Buffer),
		{{else if (and (eq method "get") (eq path "/privacyNotices/:consentType"))}}
			response: z.instanceof(Buffer),
		{{else}}
			response: {{{response}}},
		{{/if}}
		{{#if errors.length}}
		errors: [
			{{#each errors}}
			{
				{{#if (eq status "default") }}
				status: "default",
				{{else}}
				status: {{status}},
				{{/if}}
				{{#if description}}
				description: `{{description}}`,
				{{/if}}
				schema: {{{schema}}}
			},
			{{/each}}
		]
		{{/if}}
	},
{{/each}}
]);

export function create{{pascalcase @key}}ApiClient(baseUrl: string, options?: ZodiosOptions) {
    return new Zodios(baseUrl, {{@key}}Endpoints, options);
}

{{/each}}

